#ifndef __RINGBUFFER_H__
#define __RINGBUFFER_H__

class CRingBuffer
{
public:
	enum en_RING_BUFFER
	{
		en_BUFFER_DEFALUT = 1000,
		en_BUFFER_BLANK = 1	
		//  TODO : en_BUFFER_BLANK == 각종 크기 계산용 여유 공간
		// iReadPos나 iWritePos만으로 사이즈를 구하는 것은 불가능하다. 비었을 경우나, 꽉찬 경우 모두 HEAD == TAIL이 성립하기 때문

	};

	CRingBuffer(int iSize = en_BUFFER_DEFALUT);
	virtual ~CRingBuffer();

	void	Clear();		// 버퍼의 모든 데이터 삭제

	int		GetSize();	// 버퍼 총 크기
	int		GetUseSize();	// 사용 크기
	int		GetFreeSize();	// 미사용 크기

	/////////////////////////////////////////////////////////////////////////
	// 메모리상에서 끊기지 않고 입출력할 수 있는 최대 크기
	//
	// Parameters: 
	// Return: (int)사용 가능 크기
	/////////////////////////////////////////////////////////////////////////
	int		GetUnbrokenEnqueueSize();

	/////////////////////////////////////////////////////////////////////////
	// 메모리상에서 끊기지 않고 출력할 수 있는 최대 크기
	//
	// Parameters: 
	// Return: (int)사용 가능 크기
	/////////////////////////////////////////////////////////////////////////
	int		GetUnbrokenDequeueSize();

	/////////////////////////////////////////////////////////////////////////
	// 쓰기 포인터(WritePos) 기준으로 입력 :: WritePos 이동
	//
	// Parameters: (char *)입력할 데이터 포인터 (int)입력할 데이터 크기
	// Return: (int)입력한 크기
	/////////////////////////////////////////////////////////////////////////
	int		Enqueue(char *pInData, int iSize);

	/////////////////////////////////////////////////////////////////////////
	// 읽기 포인터(ReadPos) 기준으로 출력 :: ReadPos 이동
	//
	// Parameters: (char *)출력할 데이터 포인터 (int)출력할 데이터 크기
	// Return: (int)출력한 크기
	/////////////////////////////////////////////////////////////////////////
	int		Dequeue(char *pOutData, int iSize);

	/////////////////////////////////////////////////////////////////////////
	// 읽기 포인터(ReadPos) 기준으로 출력 :: ReadPos 고정
	//
	// Parameters: (char *)출력할 데이터 포인터 (int)크기
	// Return: (int)출력한 크기
	/////////////////////////////////////////////////////////////////////////
	int		Peek(char *pOutData, int iSize);

	/////////////////////////////////////////////////////////////////////////
	// 읽기 포인터(ReadPos) 기준으로 삭제 :: ReadPos 이동
	//
	// Parameters:
	// Return:
	/////////////////////////////////////////////////////////////////////////
	void	RemoveData(int iSize); // MoveReadPos(int iSize);

	/////////////////////////////////////////////////////////////////////////
	// 입력한 크기만큼 WritePos 이동
	//
	// Parameters:
	// Return: (int)이동한 크기
	/////////////////////////////////////////////////////////////////////////
	int		MoveWritePos(int iSize);


	/////////////////////////////////////////////////////////////////////////
	// 버퍼 포인터
	//
	// Parameters:
	// Return: (char *)버퍼 포인터
	/////////////////////////////////////////////////////////////////////////
	char	*GetBufferPtr();

	/////////////////////////////////////////////////////////////////////////
	// 읽기 포인터(ReadPos)
	//
	// Parameters:
	// Return: (char *)버퍼 포인터
	/////////////////////////////////////////////////////////////////////////
	char	*GetReadBufferPtr();

	/////////////////////////////////////////////////////////////////////////
	// 쓰기 포인터(WritePos)
	//
	// Parameters:
	// Return: (char *)버퍼 포인터.
	/////////////////////////////////////////////////////////////////////////
	char	*GetWriteBufferPtr();

private:
	char* _pBuffer;	// 동적으로 크기 할당
	int _iSize;		
	int _iReadPos;
	int _iWritePos;

};

#endif